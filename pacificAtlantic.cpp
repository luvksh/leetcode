// This code does not work. It shows wrong way to use DFS
// Soln attempt for https://leetcode.com/problems/pacific-atlantic-water-flow/

#include<string>
#include<vector>
#include<algorithm>
#include<map>
#include<set>
#include<unordered_set>
#include<queue>
#include<time.h>
#include<iterator>
#include<iostream>
#include<stack>
#include<set>
#include<unordered_map>
using namespace std;
class Solution {
	vector<vector<bool>> _pacific;
	vector<vector<bool>> _atlantic;
	vector<vector<bool>> _pv;
	vector<vector<bool>> _av;
	vector<vector<bool>> _pp;
	vector<vector<bool>> _ap;
	int m;
	int n;
	int pacific(int i, int j, vector<vector<int>>& matrix)
	{
		bool flag = false;
		_pv[i][j] = true;
		if (i == 0 || j == 0)
		{
			_pp[i][j] = true;
			_pacific[i][j] = true;
			return true;
		}
		if (matrix[i - 1][j] <= matrix[i][j])
		{
			if(!_pv[i-1][j])
				pacific(i - 1, j, matrix);
			else
				if (!_pp[i - 1][j])
					flag = true;
			_pacific[i][j] = _pacific[i][j] || _pacific[i - 1][j];
		}
		if (matrix[i][j - 1] <= matrix[i][j])
		{
			if(!_pv[i][j - 1])
				pacific(i, j-1, matrix);
			else 
				if (!_pp[i][j-1])
					flag = true;
			_pacific[i][j] = _pacific[i][j] || _pacific[i][j - 1];
		}
		if (i < m - 1 && matrix[i + 1][j] <= matrix[i][j])
		{
			if(!_pv[i + 1][j])
				pacific(i + 1, j, matrix);
			else
				if (!_pp[i + 1][j])
					flag = true;
			_pacific[i][j] = _pacific[i][j] || _pacific[i + 1][j];
		}
		if (j < n - 1 && matrix[i][j + 1] <= matrix[i][j])
		{
			if(!_pv[i][j + 1])
				pacific(i, j + 1, matrix);
			else 
				if (!_pp[i][j+1])
					flag = true;
			_pacific[i][j] = _pacific[i][j] || _pacific[i][j + 1];
		}
		if (!flag)
			_pp[i][j] = true;
		return _pacific[i][j];
	}

	int atlantic(int i, int j, vector<vector<int>>& matrix)
	{
		bool flag = false;
		_av[i][j] = true;
		if (i == m - 1 || j == n - 1)
		{
			_ap[i][j] = true;
			_atlantic[i][j] = true;
			return true;
		}
		if (matrix[i + 1][j] <= matrix[i][j])
		{
			if (!_av[i + 1][j])
				atlantic(i + 1, j, matrix);
			else
				if (!_ap[i + 1][j])
					flag = true;
			_atlantic[i][j] = _atlantic[i][j] || _atlantic[i + 1][j];
		}
		if (matrix[i][j + 1] <= matrix[i][j])
		{
			if (!_av[i][j + 1])
				atlantic(i, j + 1, matrix);
			else
				if (!_ap[i][j+1])
					flag = true;
			_atlantic[i][j] = _atlantic[i][j] || _atlantic[i][j + 1];
		}
		if (i > 0 && matrix[i - 1][j] <= matrix[i][j])
		{
			if(!_av[i - 1][j])
				atlantic(i - 1, j, matrix);
			else
				if (!_ap[i - 1][j])
					flag = true;
			_atlantic[i][j] = _atlantic[i][j] || _atlantic[i - 1][j];
		}
		if (j > 0 && matrix[i][j - 1] <= matrix[i][j])
		{
			if (!_av[i][j - 1])
				atlantic(i, j - 1, matrix);
			else
				if (!_ap[i][j-1])
					flag = true;
			_atlantic[i][j] = _atlantic[i][j] || _atlantic[i][j - 1];
		}
		if (!flag)
			_ap[i][j] = true;
		return _atlantic[i][j];
	}
public:
	vector<pair<int, int>> pacificAtlantic(vector<vector<int>>& matrix) {
		vector<pair<int, int>> result;
		if (matrix.size() == 0)
			return result;
		m = matrix.size();
		n = matrix[0].size();
		_pacific.assign(m, vector<bool>(n, false));
		_atlantic.assign(m, vector<bool>(n, false));
		_pv.assign(m, vector<bool>(n, false));
		_av.assign(m, vector<bool>(n, false));
		_pp.assign(m, vector<bool>(n, false));
		_ap.assign(m, vector<bool>(n, false));
		int flag = false;
		while (!flag)
		{
			flag = true;
			for (int i = 0; i < m; i++)
			{
				for (int j = 0; j < n; j++)
				{
					if (!_pp[i][j])
						pacific(i, j, matrix);
					if (!_ap[i][j])
						atlantic(i, j, matrix);
					if (_pacific[i][j] && _atlantic[i][j])
						result.push_back(make_pair(i, j));
					if (!_pp[i][j] || !_ap[i][j])
						flag = false;
				}
			}
		}
		return result;
	}
};
void main()
{
	Solution s;
	vector<vector<int>> b = {
		{7, 1, 17, 13, 9, 10, 5, 14, 0, 3},  // 0
		{7, 15, 7, 8, 15, 16, 10, 10, 5, 13}, // 1
		{18, 9, 15, 8, 19, 16, 7, 5, 5, 10}, // 2
		{15, 11, 18, 3, 1, 17, 6, 4, 10, 19}, // 3
		{3, 16, 19, 12, 12, 19, 2, 14, 5, 9}, // 4
		{7, 16, 0, 13, 14, 7, 2, 8, 6, 19}, // 5
		{5, 10, 1, 10, 2, 12, 19, 1, 0, 19}, // 6
		{13, 18, 19, 12, 17, 17, 4, 5, 8, 2}, // 7
		{2, 1, 17, 13, 14, 12, 14, 2, 16, 10}, // 8
		{5, 8, 1, 11, 16, 1, 18, 15, 6, 19}, // 9
		{3, 8, 14, 14, 5, 0, 2, 7, 5, 1}, // 10
		{17, 1, 9, 17, 10, 10, 10, 7, 1, 16}, // 11
		{14, 18, 5, 11, 17, 15, 8, 8, 14, 13}, 
		{6, 4, 10, 17, 8, 0, 11, 4, 2, 8}, 
		{16, 11, 17, 9, 3, 2, 11, 0, 6, 5}, 
		{12, 18, 18, 11, 1, 7, 12, 16, 12, 12}, 
		{2, 14, 12, 0, 2, 8, 5, 10, 7, 0}, 
		{16, 13, 1, 19, 8, 13, 11, 8, 11, 3}, {11, 2, 8, 19, 6, 14, 14, 6, 16, 12}, {18, 0, 18, 10, 16, 15, 15, 12, 4, 3}, {8, 15, 9, 13, 8, 2, 6, 11, 17, 6}, {7, 3, 0, 18, 7, 12, 2, 3, 12, 10}, {7, 9, 13, 0, 11, 16, 9, 9, 12, 13}, {9, 4, 19, 6, 8, 10, 12, 6, 7, 11}, {5, 9, 18, 0, 4, 9, 6, 4, 0, 1}, {9, 12, 1, 11, 13, 13, 0, 16, 0, 6}, {7, 15, 4, 8, 15, 17, 17, 19, 15, 1}, {7, 17, 4, 1, 1, 14, 10, 19, 10, 19}, {10, 5, 12, 5, 8, 8, 14, 14, 6, 0}, {16, 10, 10, 7, 13, 4, 0, 15, 18, 0}, {11, 2, 10, 6, 5, 13, 4, 5, 3, 1}, {9, 14, 16, 14, 15, 3, 2, 13, 17, 8}, {19, 2, 10, 1, 2, 15, 12, 10, 2, 5}, {12, 4, 8, 9, 8, 6, 4, 14, 14, 0}, {11, 17, 17, 4, 16, 13, 6, 15, 5, 7}, {12, 18, 1, 3, 9, 10, 7, 1, 1, 1}, {18, 6, 10, 8, 12, 14, 9, 12, 10, 3}, {15, 13, 18, 13, 8, 5, 12, 14, 18, 0}, {15, 4, 8, 9, 19, 18, 6, 19, 12, 0}, {4, 14, 15, 4, 17, 17, 9, 17, 9, 0}, {6, 17, 16, 10, 3, 8, 8, 18, 15, 9}, {3, 8, 4, 2, 13, 0, 2, 8, 8, 2}, {14, 12, 13, 12, 17, 4, 16, 9, 8, 7}, {0, 19, 8, 16, 1, 13, 7, 6, 15, 11}, {1, 13, 16, 14, 10, 4, 11, 19, 9, 13}, {8, 0, 2, 1, 16, 12, 16, 9, 9, 9}, {5, 2, 10, 4, 8, 12, 17, 0, 2, 15}, {11, 2, 15, 15, 14, 9, 11, 19, 18, 11}, {4, 4, 1, 5, 13, 19, 9, 17, 17, 17}, {4, 1, 8, 0, 8, 19, 11, 0, 5, 4}, {8, 16, 14, 18, 12, 2, 0, 19, 0, 13}, {7, 11, 3, 18, 8, 2, 2, 19, 8, 7}, {3, 13, 6, 1, 12, 16, 4, 13, 0, 5}, {12, 1, 16, 19, 2, 12, 16, 15, 19, 6}, {1, 7, 12, 15, 3, 3, 13, 17, 16, 12}};
	vector<vector<int>> a = { {1, 2,2, 3, 5}, {3,   2,   3,  4, 4 }, {	2,   4,  5,  3,   1}, {6, 7,  1,   4,   5}, {5,  1,   1,   2,   4 }};
	/*vector<vector<int>> a = {
		{11, 2, 11, 0, 15, 12, 4, 15, 0, 14, 11, 3, 19, 11, 5, 11, 18, 19, 4, 3, 11, 1, 9, 17, 5, 2, 15, 18, 11, 15}, 
		{12, 10, 8, 15, 4, 7, 4, 5, 7, 8, 5, 12, 3, 3, 10, 12, 16, 15, 17, 13, 13, 16, 0, 0, 17, 17, 11, 3, 14, 0}, 
		{8, 18, 1, 6, 15, 16, 14, 11, 9, 11, 3, 4, 17, 7, 2, 16, 18, 2, 0, 0, 16, 18, 10, 15, 14, 18, 10, 19, 17, 6}, 
		{14, 17, 4, 13, 13, 6, 16, 1, 3, 18, 18, 18, 4, 1, 15, 4, 0, 9, 19, 3, 6, 7, 19, 13, 11, 11, 10, 19, 3, 15}, 
		{16, 6, 19, 17, 19, 17, 5, 12, 6, 3, 1, 0, 3, 10, 13, 18, 4, 3, 9, 0, 1, 18, 9, 15, 18, 3, 4, 6, 1, 15}, {1, 2, 12, 9, 9, 7, 17, 0, 1, 14, 18, 1, 5, 3, 0, 7, 2, 19, 7, 19, 1, 11, 1, 3, 2, 4, 0, 3, 16, 18}, {18, 10, 10, 3, 12, 11, 7, 8, 3, 16, 7, 11, 11, 12, 15, 1, 13, 9, 8, 17, 1, 9, 7, 19, 1, 14, 8, 10, 18, 14}, {5, 19, 9, 4, 10, 14, 1, 5, 11, 16, 11, 3, 5, 4, 19, 8, 11, 16, 19, 12, 6, 3, 18, 16, 17, 8, 11, 19, 7, 14}, {0, 15, 17, 11, 10, 13, 19, 0, 10, 3, 15, 19, 3, 3, 3, 4, 3, 12, 17, 10, 5, 16, 12, 5, 5, 17, 5, 17, 6, 6}, {8, 19, 9, 3, 13, 8, 13, 17, 4, 12, 13, 8, 13, 12, 10, 10, 16, 7, 2, 8, 17, 3, 7, 1, 7, 16, 11, 19, 13, 19}, {6, 19, 6, 13, 10, 5, 14, 7, 3, 1, 10, 6, 4, 8, 15, 0, 0, 2, 12, 13, 14, 14, 7, 5, 1, 16, 15, 15, 4, 7}, {7, 7, 11, 14, 2, 4, 14, 2, 2, 0, 6, 11, 15, 14, 11, 13, 2, 3, 14, 9, 16, 3, 8, 15, 2, 18, 15, 15, 2, 2}, {7, 5, 12, 10, 14, 3, 6, 9, 2, 1, 2, 15, 0, 4, 7, 9, 7, 12, 15, 9, 2, 13, 7, 8, 7, 9, 4, 3, 5, 19}, {11, 9, 1, 8, 0, 15, 1, 6, 5, 11, 14, 19, 6, 11, 0, 12, 1, 6, 8, 7, 0, 1, 2, 9, 14, 4, 5, 8, 3, 16}, {8, 0, 11, 5, 14, 4, 19, 0, 6, 8, 1, 10, 13, 8, 18, 6, 6, 4, 5, 9, 10, 14, 14, 13, 12, 16, 4, 3, 3, 11}, {0, 9, 6, 19, 16, 4, 5, 10, 13, 19, 8, 15, 14, 7, 13, 11, 17, 18, 14, 18, 19, 11, 0, 4, 12, 11, 2, 8, 17, 14}, {16, 19, 16, 9, 9, 14, 5, 13, 7, 10, 18, 6, 15, 12, 12, 1, 11, 16, 1, 8, 1, 7, 16, 7, 19, 6, 12, 0, 15, 0}, {2, 4, 18, 15, 13, 9, 4, 18, 19, 5, 16, 7, 10, 1, 7, 7, 4, 4, 10, 8, 13, 15, 9, 4, 16, 13, 6, 3, 13, 7}, {3, 11, 10, 13, 6, 4, 0, 13, 11, 4, 5, 6, 19, 13, 8, 10, 8, 9, 2, 4, 4, 11, 12, 8, 12, 15, 6, 1, 10, 12}, {7, 6, 19, 3, 2, 14, 15, 6, 9, 1, 6, 14, 4, 15, 13, 9, 14, 7, 10, 12, 17, 18, 6, 4, 12, 4, 1, 6, 6, 12}, {15, 17, 9, 15, 9, 15, 9, 10, 10, 11, 12, 17, 2, 18, 11, 0, 6, 11, 14, 17, 2, 13, 9, 13, 3, 4, 3, 1, 8, 11}, {17, 13, 12, 17, 4, 19, 19, 7, 7, 13, 19, 10, 4, 16, 1, 18, 14, 2, 9, 18, 2, 8, 3, 1, 10, 9, 12, 6, 2, 11}, {17, 12, 6, 8, 3, 16, 5, 2, 16, 3, 13, 3, 13, 9, 11, 11, 5, 12, 14, 16, 3, 19, 16, 16, 1, 14, 5, 3, 17, 19}, {1, 4, 0, 3, 1, 17, 5, 15, 2, 19, 12, 7, 18, 13, 1, 0, 7, 2, 9, 18, 10, 18, 8, 9, 13, 13, 8, 10, 14, 14}, {9, 14, 4, 18, 10, 18, 3, 9, 9, 17, 16, 4, 19, 7, 3, 18, 7, 0, 10, 13, 9, 10, 11, 16, 3, 5, 1, 2, 16, 19}, {8, 10, 13, 8, 7, 2, 9, 4, 16, 15, 5, 4, 15, 7, 9, 7, 15, 2, 6, 17, 14, 3, 13, 3, 4, 15, 13, 10, 8, 16}, {17, 7, 19, 19, 13, 12, 6, 0, 11, 4, 10, 4, 1, 9, 15, 9, 7, 7, 14, 6, 7, 18, 9, 13, 6, 16, 5, 2, 17, 1}, {2, 7, 0, 4, 8, 18, 4, 11, 13, 4, 11, 12, 3, 18, 11, 2, 4, 18, 3, 3, 17, 9, 18, 11, 9, 15, 14, 19, 7, 17}, {13, 1, 15, 18, 4, 12, 18, 18, 15, 16, 7, 17, 9, 15, 11, 3, 9, 7, 18, 13, 3, 11, 7, 19, 10, 10, 7, 13, 7, 19}, {17, 17, 14, 3, 19, 7, 1, 13, 9, 3, 6, 16, 10, 8, 14, 8, 17, 18, 12, 11, 4, 11, 10, 15, 9, 0, 4, 12, 7, 15}, {4, 4, 8, 1, 7, 11, 13, 4, 11, 5, 18, 2, 16, 11, 16, 13, 0, 13, 13, 12, 11, 15, 8, 4, 0, 3, 2, 9, 8, 15}, {17, 4, 13, 5, 3, 17, 14, 4, 7, 6, 6, 11, 16, 18, 2, 0, 3, 12, 1, 5, 12, 16, 3, 14, 4, 16, 5, 8, 15, 9}, {5, 3, 17, 17, 6, 4, 19, 5, 4, 6, 11, 4, 14, 18, 4, 19, 16, 15, 1, 17, 3, 8, 13, 14, 16, 13, 18, 19, 6, 4}, {15, 0, 8, 15, 6, 6, 11, 8, 18, 2, 4, 10, 18, 16, 15, 8, 1, 5, 9, 13, 7, 19, 12, 2, 9, 18, 1, 15, 12, 8}, {5, 0, 18, 14, 1, 8, 18, 15, 5, 13, 15, 7, 8, 8, 9, 0, 14, 12, 4, 17, 2, 10, 9, 7, 19, 7, 19, 9, 7, 1}, {7, 4, 16, 16, 13, 4, 3, 6, 15, 11, 14, 7, 3, 0, 5, 15, 10, 13, 18, 18, 11, 6, 7, 9, 19, 13, 4, 2, 7, 9}, {9, 14, 15, 11, 14, 5, 15, 1, 19, 15, 3, 4, 0, 10, 4, 1, 2, 15, 18, 15, 15, 2, 9, 0, 3, 10, 9, 16, 4, 1}, {14, 13, 17, 19, 0, 13, 15, 9, 16, 18, 5, 6, 16, 16, 6, 10, 14, 15, 17, 5, 9, 2, 5, 11, 19, 19, 11, 6, 15, 14}, {17, 7, 19, 6, 5, 19, 10, 2, 11, 17, 17, 13, 16, 13, 19, 4, 12, 3, 4, 13, 7, 9, 19, 9, 12, 3, 16, 8, 18, 13}};*/
	//vector<vector<int>> a = { { 28, 18, 10 }, {28, 17, 11}, {28, 17, 28} };
	auto r = s.pacificAtlantic(a);
}